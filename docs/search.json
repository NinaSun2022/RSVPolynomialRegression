[
  {
    "objectID": "posts/RSV Using Polynomial Regression/index.html",
    "href": "posts/RSV Using Polynomial Regression/index.html",
    "title": "Respiratory Syncytical Virus(RSV)",
    "section": "",
    "text": "Clinical Laboratory Testing\nClinical symptoms of RSV are nonspecific and can overlap with other viral respiratory infections, as well as some bacterial infections. Several types of laboratory tests are available for confirming RSV infection. These tests may be performed on upper and lower respiratory specimens.\nThe most commonly used types of RSV clinical laboratory tests are\n\nReal-time reverse transcriptase-polymerase chain reaction (rRT-PCR), which is more sensitive than culture and antigen testing\nAntigen testing, which is highly sensitive in children but not sensitive in adults\n\nLess commonly used tests include:\n\nViral culture\nSerology, which is usually only used for research and surveillance studies\n\nSome tests can differentiate between RSV subtypes (A and B), but the clinical significance of these subtypes is unclear.\n\nPackage Loaded:\n\n\nCode\nlibrary(readxl)\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nCode\nlibrary(kableExtra)\n\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\n\n\nLoad Dataset:\n\n\nCode\ndata <- read_excel(\"/Users/arunraj/Documents/MS Data Science/Advance Statistical Modeling/Week1-Project/PolynomialRegressionArNa/NinaCode/RSVProject/RSVproject2022/RSV Data for the US.xlsx\")\ndata %>% \n    head() %>% \n    kable() %>% \n    kable_styling()\n\n\n\n\n \n  \n    RepWeekDate \n    Antigen Detections numerator \n    PCRDetectionsnumerator \n    Antigen Detection percent \n    Virus Isolation percent \n    PCR Detection percent \n  \n \n\n  \n    2020-11-14 \n    12 \n    13 \n    2.256 \n    0 \n    0.063 \n  \n  \n    2020-11-21 \n    12 \n    7 \n    2.317 \n    0 \n    0.030 \n  \n  \n    2020-11-28 \n    5 \n    6 \n    0.681 \n    0 \n    0.027 \n  \n  \n    2020-12-05 \n    4 \n    21 \n    0.546 \n    0 \n    0.085 \n  \n  \n    2020-12-12 \n    7 \n    58 \n    1.012 \n    0 \n    0.241 \n  \n  \n    2020-12-19 \n    6 \n    13 \n    0.862 \n    0 \n    0.057 \n  \n\n\n\n\n\n\n\nData Preprocessing\nThe first thing that we’ll do in data preprocessing is to check for missing values.\n\n\nCode\ncolSums(is.na(data))\n\n\n                 RepWeekDate Antigen Detections numerator \n                           0                            0 \n      PCRDetectionsnumerator    Antigen Detection percent \n                           0                            0 \n     Virus Isolation percent        PCR Detection percent \n                           0                            0 \n\n\nOur dat does not have missing values, which is good. If theres is missing value, we have to decide to impute the data or exclude the obsevation.\n\n\nRemoving outliers\nLet’s now take a look at the distribution of our data by drawing boxplots.\n\n\nCode\ndata %>% \n   select_if(is.numeric) %>% \n   boxplot(main = 'Boxplot of parameters', xlab = 'Parameters', ylab = 'RepWeekDate')\n\n\n\n\n\n\n\nCode\noutlier_slag <- min(boxplot(data['PCRDetectionsnumerator'], plot = FALSE)$out)\ndata.outliers <- data %>% \n   filter(PCRDetectionsnumerator >= outlier_slag)\n\n\n\n\nCode\ndata %>% \n    ggplot(aes(x = RepWeekDate, y = PCRDetectionsnumerator)) +\n    geom_point() + \n    geom_point(data = data.outliers, aes(x = RepWeekDate, y = PCRDetectionsnumerator), col = 'red') + \n    labs(\n        title = 'Distribution of strength : normal vs outlier (red)',\n        x = 'RepWeekDate',\n        y = 'PCRDetectionsnumerator'\n    )\n\n\n\n\n\n\n\nData Distribution:\n\n\nCode\ndata %>% \n    select_if(is.numeric) %>% \n    pivot_longer(cols = -'Virus Isolation percent', names_to = 'param') %>% \n    ggplot(aes(x = value)) +\n    geom_density() +\n    facet_wrap(~param, scales = 'free_x')  +\n    labs(\n        title = 'Density graph of parameters',\n        x = 'Parameters',\n        y = 'Week Frequency'\n    )\n\n\n\n\n\n\n\nCode\nggplot(data=data,aes(x=RepWeekDate,y=PCRDetectionsnumerator))+geom_smooth()\n\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n\n\n\n\n\n\n\nWhy Ploynomial Regression?\nIn simple linear regression algorithm only works when the relationship between the data is linear But suppose if we have non-linear data then Linear regression will not capable to draw a best-fit line and It fails in such conditions. consider the below diagram which has a non-linear relationship and you can see the Linear regression results on it, which does not perform well means which do not comes close to reality. Hence, we introduce polynomial regression to overcome this problem, which helps identify the curvilinear relationship between independent and dependent variables.\n\n\nStructure of the assignment\n\nLoad RSV dataset\nplot them in scatter plot/graph\nEnsure the data is nonlinear and hence we are moving to polynomial regression.\nprepare training and test data set\nconstruct a polynomial regression model and ploy them in a graph using ggplot function\nuse K- means clustering to spilt the data to find which degree of polynomial suits our regression model.\nconstruct a polynomial regression model.\nTest the model with some values and find whether fall in the regression lines.\nConclusion.\n\n\n\n\nReferences:\n\nPosting Github website: https://www.youtube.com/watch?v=YoKjBcuUP0s\nData : https://www.cdc.gov/surveillance/nrevss/rsv/natl-trend.html\nhttps://rpubs.com/aerlaut/optimizing-concrete-polynomial-regression\n\n\n\n\n\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RSVPolynomialRegression",
    "section": "",
    "text": "default\n\n\n\n\n\n\n\n\n\n\n\nNov 13, 2022\n\n\nArun Rajendran & Zhongyi Sun\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]